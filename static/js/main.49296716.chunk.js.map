{"version":3,"sources":["components/input/Dropdown.js","components/input/BudgetInput.js","components/misc/Date.js","components/misc/title.js","components/output/TotalOutput.js","components/output/BudgetOutput.js","components/buttons/Button.js","components/output/ValueOutput.js","components/output/IncomeOutput.js","components/output/IncomeOutputList.js","components/output/ExpenseOutput.js","components/output/ExpenseOutputList.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","className","optionArr","value","onSelectChanges","onChange","map","el","i","key","BudgetInput","descValue","budgetValue","onDescChange","type","onSelectChange","onBudgetSubmit","onValChange","placeholder","onClick","CurrentDate","current","months","month","year","Date","getMonth","getFullYear","Title","TotalOutput","BudgetOutput","Button","buttonType","handler","ValueOutput","handleClick","IncomeOutput","desc","id","handleButton","IncomeOutputList","list","removeIncome","item","index","description","ExpenseOutput","ExpenseOutputList","removeExpense","initialBudget","initialState","incomes","expenses","budgetObj","finalBudget","budgetReducer","state","action","console","log","payload","isExpense","budget","isIncome","concat","parseInt","alert","incomeItems","JSON","parse","localStorage","getItem","splice","expenseItems","App","React","useReducer","dispatch","useEffect","setItem","stringify","useSemiPersistantReducer","budgetState","setBudget","href","rel","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49296716.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Dropdown = ({className, optionArr, value, onSelectChanges}) => {\r\n //USE PROPS IN THIS COMPONENT, maybe user can add custom categories, pass array as props?\r\n\r\n  //  let opt = sel.options[sel.selectedIndex];\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n            <select className={className} onChange={onSelectChanges} value={value}>\r\n                {optionArr.map((el,i) => (<option key={i}>{el}</option>))}\r\n            </select>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dropdown;\r\n\r\n\r\n","import React from 'react';\r\nimport Dropdown from './Dropdown'\r\n\r\nconst BudgetInput = ({ descValue, budgetValue, onDescChange, type, onSelectChange, onBudgetSubmit, onValChange }) => {\r\n\r\n    return (\r\n        <div className=\"add\">\r\n            <Dropdown \r\n                className=\"add__type\"\r\n                optionArr={['+','-']}\r\n                onSelectChanges={onSelectChange}\r\n                value={type}\r\n            />\r\n            <input \r\n                type=\"text\" \r\n                className=\"add__description\" \r\n                placeholder=\"Add description\" \r\n                value={descValue}\r\n                onChange={onDescChange} //handler fron App (Parent) component\r\n            />\r\n            <input \r\n                type=\"number\" \r\n                className=\"add__value\" \r\n                placeholder=\"Value\" \r\n                value={budgetValue}\r\n                onChange={onValChange}\r\n            />\r\n            <Dropdown\r\n                className=\"add__category\"\r\n                optionArr={['Select Category','Salary','Business','Travel','Automobile','Food','Entertainment']}\r\n            />\r\n            <button onClick={onBudgetSubmit}>Enter</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BudgetInput;\r\n","import React from 'react';\r\n\r\nconst CurrentDate = () => {\r\n    let current, months, month, year;\r\n    current = new Date();//store today's date\r\n\r\n    months = ['January', 'February', 'March', 'April', 'May', 'June' , 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    month = current.getMonth();\r\n\r\n    year = current.getFullYear();\r\n\r\n    return (\r\n        \r\n    <span>{months[month]} {year}</span>\r\n        \r\n    )\r\n}\r\n\r\n//months[month] + ' ' + year;\r\nexport default CurrentDate;","import React from 'react';\r\nimport CurrentDate from './Date'\r\n\r\nconst Title = () => {\r\n\r\n\r\n    return (\r\n        <div className=\"budget__title\">\r\n            <h1>BudgetTrak</h1>\r\n            <p>Available Budget for <CurrentDate /></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nconst TotalOutput = () => {\r\n    \r\n    return (\r\n        <div>\r\n            Final budget is: \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TotalOutput;","import React from 'react';\r\nimport BudgetInput from '../input/BudgetInput';\r\nimport Title from '../misc/title';\r\nimport TotalOutput from './TotalOutput';\r\n\r\nconst BudgetOutput = () => {\r\n\r\n    return (\r\n        <>\r\n            <Title />\r\n            <TotalOutput />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BudgetOutput;","import React from 'react';\r\nimport { BsFillXOctagonFill } from \"react-icons/bs\";\r\nconst Button = ({buttonType, handler}) => (\r\n    <>\r\n        <div className=\"item__delete\">\r\n            <button className={buttonType} onClick={handler}>\r\n                <i><BsFillXOctagonFill /></i>\r\n            </button>\r\n        </div>\r\n    </>\r\n)\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from '../buttons/Button';\r\n\r\n//move item__value element to left when hovering over it, and make delete button appear\r\n\r\nconst ValueOutput = ({type, value, handleClick}) => {\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"right clearfix\">\r\n                <div className=\"item__value\">{type} {value}</div>\r\n                <Button buttonType=\"item__delete--btn\" handler={handleClick}/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ValueOutput;","import React from 'react';\r\nimport ValueOutput from './ValueOutput';\r\n\r\nconst IncomeOutput = ({ desc, type,id, value, handleButton }) => {\r\n    //id = inc-{id}\r\n        return (\r\n            <>\r\n                <div className=\"item clearfix income\" id={id}>\r\n                    <div className=\"item__description\">{desc}</div>\r\n                        <ValueOutput\r\n                            type={type}\r\n                            value={value}\r\n                            handleClick={handleButton}\r\n                        />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\nexport default IncomeOutput;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport IncomeOutput from './IncomeOutput';\r\n\r\n// list will be list of income objects\r\nconst IncomeOutputList = ({ list, removeIncome }) => {\r\n\r\n    return (\r\n        <div className=\"income__list\">\r\n            <div className=\"income__list--title\">INCOME</div>\r\n            {list.map((item, index) => <IncomeOutput \r\n                                key={index} \r\n                                value={item.value} \r\n                                type={item.type} \r\n                                desc={item.description}  \r\n                                handleButton={()=>removeIncome(index)}\r\n                                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IncomeOutputList;","import React from 'react';\r\nimport ValueOutput from './ValueOutput';\r\n\r\n\r\n\r\n\r\n//Det=leteButton appears after hovering over income value\r\n// const IncomeOutput = ({ obj }) => {\r\n// //id = inc-{id}\r\n//     return (\r\n//         <>\r\n//             <div className=\"item clearfix\" id={obj.id}>\r\n//                 <div className=\"item__description\">{obj.description}</div>\r\n//                     <ValueOutput\r\n//                         type={obj.type}\r\n//                         //value={}\r\n//                     />\r\n//             </div>\r\n//         </>\r\n//     )\r\n// }\r\nconst ExpenseOutput = ({ desc, type,id, value, handleButton }) => {\r\n    //id = inc-{id}\r\n        return (\r\n            <>\r\n                <div className=\"item clearfix expense\" id={id}>\r\n                    <div className=\"item__description\">{desc}</div>\r\n                        <ValueOutput\r\n                            type={type}\r\n                            value={value}\r\n                            handleClick={handleButton}\r\n                        />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\nexport default ExpenseOutput;","import React from 'react';\r\nimport ExpenseOutput from './ExpenseOutput';\r\n\r\n// list will be list of income objects\r\nconst ExpenseOutputList = ({ list, removeExpense }) => {\r\n\r\n    return (\r\n        <div className=\"expense__list\">\r\n            <div className=\"expense__list--title\">EXPENSE</div>\r\n            {list.map((item, index) => <ExpenseOutput \r\n                                key={index}\r\n                                value={item.value} \r\n                                type={item.type} \r\n                                desc={item.description} \r\n                                handleButton={()=>removeExpense(index)}\r\n                                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExpenseOutputList;","import React, { useState, useReducer } from 'react';\r\nimport './App.css';\r\nimport BudgetInput from './components/input/BudgetInput';\r\nimport BudgetOutput from './components/output/BudgetOutput';\r\nimport IncomeOutputList from './components/output/IncomeOutputList';\r\nimport ExpenseOutputList from './components/output/ExpenseOutputList';\r\n\r\n\r\n     const calcPercentage = (totalIncome) =>\r\n        {\r\n            if(totalIncome > 0)\r\n            {\r\n                this.percentage = Math.round((this.value / totalIncome) * 100);\r\n            }\r\n            else \r\n            {\r\n                this.percentage = -1;\r\n            }\r\n        }\r\n\r\n      const getPercentage = () =>\r\n        {\r\n            return this.percentage;\r\n        }\r\n\r\nconst useSemiPersistentState = (key, initialState) => {\r\n // console.log(JSON.parse(localStorage.getItem(key)));\r\n  const [value, setValue] = React.useState(\r\n    localStorage.getItem(key) ? JSON.parse(localStorage.getItem(key)) : initialState\r\n  );\r\n  \r\n  React.useEffect(()=>{\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }, [value, key])\r\n\r\n  return [value, setValue];\r\n};\r\n\r\nconst initialBudget = {\r\n  description: '',\r\n  type: '+',\r\n  key: 'income',\r\n  value: 0\r\n};\r\n\r\nconst initialState = {\r\n  incomes: [{}],\r\n  expenses: [{}],\r\n  budgetObj: initialBudget,\r\n  finalBudget: 0\r\n};\r\n\r\n/*\r\nFor total/final budget:\r\nwhen you submit an income, add value of the income to total\r\nwhen you submit an expense, subtract value of the expense from total\r\n*/\r\n\r\nconst budgetReducer = (state, action) => {\r\n  switch(action.type) {\r\n    case \"CHECK_STATE\":\r\n      console.log(state); //just to check state on submit\r\n    case \"ON_DESC_CHANGE\":\r\n      return {\r\n        ...state,\r\n        budgetObj: {\r\n          ...state.budgetObj,\r\n          description: action.payload\r\n        }\r\n      }\r\n    case \"ON_TYPE_CHANGE\":\r\n      const isExpense = action.payload === '-';\r\n      return {\r\n        ...state,\r\n        budgetObj: {\r\n          ...state.budgetObj,\r\n          type: action.payload,\r\n          key: isExpense ? 'expense' : 'income'\r\n        }\r\n      }\r\n    case \"ON_VALUE_CHANGE\":\r\n      return {\r\n        ...state,\r\n        budgetObj: {\r\n          ...state.budgetObj,\r\n          value: action.payload, \r\n        }\r\n      }\r\n    case 'SUBMIT_BUDGET':\r\n      const budget = {...state};\r\n      // figure out where to add the current budget object\r\n      const isIncome = budget.budgetObj.type === '+';\r\n      //console.log(state);\r\n      //console.log(state.incomes[0].value);//to print value of 1ST income object\r\n\r\n      if(budget.budgetObj.description !== '' && budget.budgetObj.value !== '')\r\n      {\r\n        return {\r\n          // here we don't want to concat the whole state into isIncome and isExpense\r\n          incomes: isIncome ? state.incomes.concat(budget.budgetObj) : state.incomes, // maybe add to incomes, setIncomes\r\n          expenses: isIncome ? state.expenses : state.expenses.concat(budget.budgetObj), // maybe add to expenses\r\n          finalBudget: parseInt(budget.budgetObj.value) + 1,\r\n          budgetObj: initialBudget, // reset budget object\r\n        }\r\n      }\r\n      else if (budget.budgetObj.description === '') {\r\n        alert(\"Please enter a description\");\r\n        return {\r\n          ...state\r\n        }\r\n      }\r\n      else if (budget.budgetObj.value === '') {\r\n        alert(\"Please enter a value\");\r\n        return {\r\n          ...state\r\n        }\r\n      }\r\n    case \"REMOVE_INCOME_ITEM\":\r\n      let incomeItems = JSON.parse(localStorage.getItem(\"income\")).incomes;\r\n      incomeItems.splice(action.payload, 1);\r\n      return {\r\n        ...state,\r\n        incomes: incomeItems\r\n      }\r\n    case \"REMOVE_EXPENSE_ITEM\":\r\n      let expenseItems = JSON.parse(localStorage.getItem(\"income\")).expenses;\r\n      expenseItems.splice(action.payload, 1);\r\n      return {\r\n        ...state,\r\n        expenses: expenseItems\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// maybe do this: get rid of key below, and make key part of state?\r\n//key can become changed in reducer, in initialstate, key can be 'income'\r\nconst useSemiPersistantReducer = (key, initialState) => {\r\n  const [value, dispatch] = React.useReducer(\r\n    budgetReducer,\r\n    localStorage.getItem(key) ? JSON.parse(localStorage.getItem(key)) : initialState\r\n  );\r\n//put following 3 lines in reducer?\r\n  React.useEffect(()=>{\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }, [value, dispatch]) //[inocmes, setIncomes]\r\n\r\n  return [value, dispatch];\r\n}\r\n\r\n// const removeItem = (key) => {\r\n//   React.useEffect(()=>{\r\n//     localStorage.removeItem(key);\r\n//   }, [key])\r\n// }\r\n\r\nconst App = () => {\r\n\r\n  // [value, dispatch] setIncomes is a dispatch method, budgets is the state\r\n  //const [budgets, setBudget] = useSemiPersistantReducer('income',initialState);\r\n  //const [expenses, setExpenses] = useSemiPersistentReducer('expense',initialState);\r\n  // incomes will be array of income objects/components\r\n\r\n  //const [incomes, setIncomes] = useSemiPersistentState('income',[{}]);\r\n  //const [expenses, setExpenses] = useSemiPersistentState('expense',[{}]);\r\n  //const [description, setDescription] = useState('');\r\n  //const [type, setType] = useState('+');\r\n  //const [value, setValue] = useState('');\r\n\r\n  // const budgetObj = {\r\n  //   desc: description,\r\n  //   budgetType: type,\r\n  //   incomeValue: value\r\n  // }\r\n\r\n  // const initialbudget = {\r\n  //   desc: '',\r\n  //   budgetType: '+',\r\n  //   incomeValue: ''\r\n  // }\r\n  \r\n  /*\r\n  const handleBudgetObjArray = () => {\r\n    // const incomes = this.state.players.slice(0);\r\n\r\n    // incomes.push({\r\n    //   name: 'Maul',\r\n    //   id: 26\r\n    // });\r\n  \r\n    // this.setState({\r\n    //   players: players,\r\n    // });\r\n\r\n    if(budgetObj.budgetType === '+') {\r\n      setIncomes(incomes.concat(budgetObj));\r\n    }\r\n    else if(budgetObj.budgetType === '-') {\r\n      setExpenses(expenses.concat(budgetObj));\r\n    }\r\n  }*/\r\n\r\n  //const handleChange = (event) => {  //this handler is called in the child component BudgetInput\r\n  //  setDescription(event.target.value);\r\n // }\r\n\r\n//   const handleSelectChange = (event) => {  //this handler is called in the child component BudgetInput\r\n//     setType(event.target.value);\r\n//   }\r\n\r\n//   const handleValueChange = (event) => {\r\n//     setValue(event.target.value);\r\n//     console.log(budgetObj)\r\n//   }\r\n\r\n//   const removeInc = (index) => {\r\n//      let items = JSON.parse(localStorage.getItem(\"income\"));\r\n//      items.splice(index, 1);\r\n//      setIncomes(items);\r\n//   }\r\n\r\n//   const removeExp = (index) => {\r\n//     let items = JSON.parse(localStorage.getItem(\"expense\"));\r\n//     items.splice(index, 1);\r\n//     setExpenses(items);\r\n//  }\r\n\r\n// [value, dispatch] setIncomes is a dispatch method, budgets is the state\r\nconst [budgetState, setBudget] = useSemiPersistantReducer(initialState.budgetObj.key,initialState);\r\n//const [budgetState, setBudget] = useSemiPersistantReducer('expense',initialState);\r\nconst {incomes, expenses, budgetObj, key} = budgetState;\r\n\r\n//make incomeOutput appear when button in BudgetInput is clicked\r\n  return (\r\n    <div className=\"App\">\r\n<link href=\"http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css\" rel=\"stylesheet\" type=\"text/css\"></link>\r\n      <div className=\"top\">\r\n        <BudgetOutput />\r\n      </div>\r\n\r\n      <div className=\"bottom\">\r\n        <BudgetInput \r\n          descValue={budgetObj.description || ''} //event.target.value\r\n          /*onDescChange={handleChange}*/\r\n          //want to set value of budgetObj.description when Desc changes\r\n          onDescChange={event => setBudget({ type: \"ON_DESC_CHANGE\", payload: event.target.value })}\r\n          //want to set description onDescChange\r\n          /*onSelectChange={handleSelectChange}*/\r\n          onSelectChange={event => setBudget({ type: \"ON_TYPE_CHANGE\", payload: event.target.value })}\r\n          type={budgetObj.type || ''}\r\n          /*onBudgetSubmit={handleBudgetObjArray}*/\r\n          onBudgetSubmit={ () => setBudget({ type : 'SUBMIT_BUDGET' }) }\r\n          budgetValue={budgetObj.value || ''}\r\n          /*onValChange={handleValueChange}*/\r\n          onValChange={event => setBudget({ type: \"ON_VALUE_CHANGE\", payload: event.target.value })}\r\n        />\r\n\r\n        {/* <IncomeOutput \r\n          obj={incomeObj}\r\n        /> */}\r\n\r\n        {/* <IncomeOutput \r\n          desc={description}\r\n          type={type}\r\n        /> */}\r\n        <div className=\"container clearfix\">\r\n          <IncomeOutputList \r\n            list={incomes}\r\n            removeIncome={ (index) => setBudget({ type: \"REMOVE_INCOME_ITEM\", payload: index })}\r\n          /> \r\n          <ExpenseOutputList\r\n            list={expenses}\r\n            removeExpense={(index) => setBudget({ type: \"REMOVE_EXPENSE_ITEM\", payload: index })}\r\n          />\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}